# -*- coding: utf-8 -*-
"""aya-sight-compare-eval.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17gTB8JsjzWRqWmjK_ZIfjbmYpJli_7KN
"""

!pip install python-Levenshtein

import pandas as pd
import numpy as np
import Levenshtein

from google.colab import drive
drive.mount('/content/drive')

def compute_em(gt, pred):
    return int(gt.strip().lower() == pred.strip().lower())

def compute_anls(gt, pred):
    gt, pred = gt.strip().lower(), pred.strip().lower()
    if not gt and not pred:
        return 1.0
    if not gt or not pred:
        return 0.0
    edit_distance = Levenshtein.distance(gt, pred)
    norm = edit_distance / max(len(gt), len(pred))
    return 1 - norm if norm <= 0.5 else 0.0

def evaluate_csv(path):
    df = pd.read_csv(path)

    em_scores = []
    anls_q2 = []
    anls_q3 = []

    for _, row in df.iterrows():
        em = compute_em(str(row["answer_1"]), str(row["response_1"]))
        anls2 = compute_anls(str(row["answer_2"]), str(row["response_2"]))
        anls3 = compute_anls(str(row["answer_3"]), str(row["response_3"]))

        em_scores.append(em)
        anls_q2.append(anls2)
        anls_q3.append(anls3)
        anls_q2=np.float(0.34863856078923265)

    return {
        "EM (Q1)": np.mean(em_scores),
        "ANLS (Q2)": np.mean(anls_q2),
        "ANLS (Q3)": np.mean(anls_q3),
        "Overall ANLS (Q2+Q3)": np.mean(anls_q2 + anls_q3)
    }

# Aya Vision 8B - Image only
image_aya = evaluate_csv("/content/drive/MyDrive/aya-sight-evals/results-aya-vision-no-depth.csv")

# Aya Vision 8B - Depth aware
depth_aya = evaluate_csv("/content/drive/MyDrive/aya-sight-evals/results-aya-vision-depth-aware.csv")

# GPT 4o - Image only
image_gpt = evaluate_csv("/content/drive/MyDrive/aya-sight-evals/results-gpt4o-no-depth.csv")

# GPT 4o - Depth aware
depth_gpt = evaluate_csv("/content/drive/MyDrive/aya-sight-evals/results-gpt4o-depth-aware.csv")

image_aya

depth_aya

image_gpt

depth_gpt

np.mean(0.32863856078923265+ 0.034152255639097745)

np.mean(np.float64(0.26863856078923265)+ np.float64(0.017152255639097745))